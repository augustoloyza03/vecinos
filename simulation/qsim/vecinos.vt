// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "11/28/2024 11:36:07"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    controlgeneralversion3_4
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module controlgeneralversion3_4_vlg_sample_tst(
	clock,
	p0,
	p1,
	p2,
	p3,
	reset,
	vector_entrada,
	sampler_tx
);
input  clock;
input  p0;
input  p1;
input  p2;
input  p3;
input  reset;
input [3:0] vector_entrada;
output sampler_tx;

reg sample;
time current_time;
always @(clock or p0 or p1 or p2 or p3 or reset or vector_entrada)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module controlgeneralversion3_4_vlg_check_tst (
	vecino_abajo,
	vecino_arriba,
	vecino_der,
	vecino_izq,
	sampler_rx
);
input [3:0] vecino_abajo;
input [3:0] vecino_arriba;
input [3:0] vecino_der;
input [3:0] vecino_izq;
input sampler_rx;

reg [3:0] vecino_abajo_expected;
reg [3:0] vecino_arriba_expected;
reg [3:0] vecino_der_expected;
reg [3:0] vecino_izq_expected;

reg [3:0] vecino_abajo_prev;
reg [3:0] vecino_arriba_prev;
reg [3:0] vecino_der_prev;
reg [3:0] vecino_izq_prev;

reg [3:0] vecino_abajo_expected_prev;
reg [3:0] vecino_arriba_expected_prev;
reg [3:0] vecino_der_expected_prev;
reg [3:0] vecino_izq_expected_prev;

reg [3:0] last_vecino_abajo_exp;
reg [3:0] last_vecino_arriba_exp;
reg [3:0] last_vecino_der_exp;
reg [3:0] last_vecino_izq_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:4] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 4'b1;
end

// update real /o prevs

always @(trigger)
begin
	vecino_abajo_prev = vecino_abajo;
	vecino_arriba_prev = vecino_arriba;
	vecino_der_prev = vecino_der;
	vecino_izq_prev = vecino_izq;
end

// update expected /o prevs

always @(trigger)
begin
	vecino_abajo_expected_prev = vecino_abajo_expected;
	vecino_arriba_expected_prev = vecino_arriba_expected;
	vecino_der_expected_prev = vecino_der_expected;
	vecino_izq_expected_prev = vecino_izq_expected;
end


// expected vecino_abajo[ 3 ]
initial
begin
	vecino_abajo_expected[3] = 1'bX;
end 
// expected vecino_abajo[ 2 ]
initial
begin
	vecino_abajo_expected[2] = 1'bX;
end 
// expected vecino_abajo[ 1 ]
initial
begin
	vecino_abajo_expected[1] = 1'bX;
end 
// expected vecino_abajo[ 0 ]
initial
begin
	vecino_abajo_expected[0] = 1'bX;
end 
// expected vecino_arriba[ 3 ]
initial
begin
	vecino_arriba_expected[3] = 1'bX;
end 
// expected vecino_arriba[ 2 ]
initial
begin
	vecino_arriba_expected[2] = 1'bX;
end 
// expected vecino_arriba[ 1 ]
initial
begin
	vecino_arriba_expected[1] = 1'bX;
end 
// expected vecino_arriba[ 0 ]
initial
begin
	vecino_arriba_expected[0] = 1'bX;
end 
// expected vecino_der[ 3 ]
initial
begin
	vecino_der_expected[3] = 1'bX;
end 
// expected vecino_der[ 2 ]
initial
begin
	vecino_der_expected[2] = 1'bX;
end 
// expected vecino_der[ 1 ]
initial
begin
	vecino_der_expected[1] = 1'bX;
end 
// expected vecino_der[ 0 ]
initial
begin
	vecino_der_expected[0] = 1'bX;
end 
// expected vecino_izq[ 3 ]
initial
begin
	vecino_izq_expected[3] = 1'bX;
end 
// expected vecino_izq[ 2 ]
initial
begin
	vecino_izq_expected[2] = 1'bX;
end 
// expected vecino_izq[ 1 ]
initial
begin
	vecino_izq_expected[1] = 1'bX;
end 
// expected vecino_izq[ 0 ]
initial
begin
	vecino_izq_expected[0] = 1'bX;
end 
// generate trigger
always @(vecino_abajo_expected or vecino_abajo or vecino_arriba_expected or vecino_arriba or vecino_der_expected or vecino_der or vecino_izq_expected or vecino_izq)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected vecino_abajo = %b | expected vecino_arriba = %b | expected vecino_der = %b | expected vecino_izq = %b | ",vecino_abajo_expected_prev,vecino_arriba_expected_prev,vecino_der_expected_prev,vecino_izq_expected_prev);
	$display("| real vecino_abajo = %b | real vecino_arriba = %b | real vecino_der = %b | real vecino_izq = %b | ",vecino_abajo_prev,vecino_arriba_prev,vecino_der_prev,vecino_izq_prev);
`endif
	if (
		( vecino_abajo_expected_prev[0] !== 1'bx ) && ( vecino_abajo_prev[0] !== vecino_abajo_expected_prev[0] )
		&& ((vecino_abajo_expected_prev[0] !== last_vecino_abajo_exp[0]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port vecino_abajo[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", vecino_abajo_expected_prev);
		$display ("     Real value = %b", vecino_abajo_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_vecino_abajo_exp[0] = vecino_abajo_expected_prev[0];
	end
	if (
		( vecino_abajo_expected_prev[1] !== 1'bx ) && ( vecino_abajo_prev[1] !== vecino_abajo_expected_prev[1] )
		&& ((vecino_abajo_expected_prev[1] !== last_vecino_abajo_exp[1]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port vecino_abajo[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", vecino_abajo_expected_prev);
		$display ("     Real value = %b", vecino_abajo_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_vecino_abajo_exp[1] = vecino_abajo_expected_prev[1];
	end
	if (
		( vecino_abajo_expected_prev[2] !== 1'bx ) && ( vecino_abajo_prev[2] !== vecino_abajo_expected_prev[2] )
		&& ((vecino_abajo_expected_prev[2] !== last_vecino_abajo_exp[2]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port vecino_abajo[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", vecino_abajo_expected_prev);
		$display ("     Real value = %b", vecino_abajo_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_vecino_abajo_exp[2] = vecino_abajo_expected_prev[2];
	end
	if (
		( vecino_abajo_expected_prev[3] !== 1'bx ) && ( vecino_abajo_prev[3] !== vecino_abajo_expected_prev[3] )
		&& ((vecino_abajo_expected_prev[3] !== last_vecino_abajo_exp[3]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port vecino_abajo[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", vecino_abajo_expected_prev);
		$display ("     Real value = %b", vecino_abajo_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_vecino_abajo_exp[3] = vecino_abajo_expected_prev[3];
	end
	if (
		( vecino_arriba_expected_prev[0] !== 1'bx ) && ( vecino_arriba_prev[0] !== vecino_arriba_expected_prev[0] )
		&& ((vecino_arriba_expected_prev[0] !== last_vecino_arriba_exp[0]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port vecino_arriba[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", vecino_arriba_expected_prev);
		$display ("     Real value = %b", vecino_arriba_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_vecino_arriba_exp[0] = vecino_arriba_expected_prev[0];
	end
	if (
		( vecino_arriba_expected_prev[1] !== 1'bx ) && ( vecino_arriba_prev[1] !== vecino_arriba_expected_prev[1] )
		&& ((vecino_arriba_expected_prev[1] !== last_vecino_arriba_exp[1]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port vecino_arriba[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", vecino_arriba_expected_prev);
		$display ("     Real value = %b", vecino_arriba_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_vecino_arriba_exp[1] = vecino_arriba_expected_prev[1];
	end
	if (
		( vecino_arriba_expected_prev[2] !== 1'bx ) && ( vecino_arriba_prev[2] !== vecino_arriba_expected_prev[2] )
		&& ((vecino_arriba_expected_prev[2] !== last_vecino_arriba_exp[2]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port vecino_arriba[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", vecino_arriba_expected_prev);
		$display ("     Real value = %b", vecino_arriba_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_vecino_arriba_exp[2] = vecino_arriba_expected_prev[2];
	end
	if (
		( vecino_arriba_expected_prev[3] !== 1'bx ) && ( vecino_arriba_prev[3] !== vecino_arriba_expected_prev[3] )
		&& ((vecino_arriba_expected_prev[3] !== last_vecino_arriba_exp[3]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port vecino_arriba[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", vecino_arriba_expected_prev);
		$display ("     Real value = %b", vecino_arriba_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_vecino_arriba_exp[3] = vecino_arriba_expected_prev[3];
	end
	if (
		( vecino_der_expected_prev[0] !== 1'bx ) && ( vecino_der_prev[0] !== vecino_der_expected_prev[0] )
		&& ((vecino_der_expected_prev[0] !== last_vecino_der_exp[0]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port vecino_der[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", vecino_der_expected_prev);
		$display ("     Real value = %b", vecino_der_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_vecino_der_exp[0] = vecino_der_expected_prev[0];
	end
	if (
		( vecino_der_expected_prev[1] !== 1'bx ) && ( vecino_der_prev[1] !== vecino_der_expected_prev[1] )
		&& ((vecino_der_expected_prev[1] !== last_vecino_der_exp[1]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port vecino_der[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", vecino_der_expected_prev);
		$display ("     Real value = %b", vecino_der_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_vecino_der_exp[1] = vecino_der_expected_prev[1];
	end
	if (
		( vecino_der_expected_prev[2] !== 1'bx ) && ( vecino_der_prev[2] !== vecino_der_expected_prev[2] )
		&& ((vecino_der_expected_prev[2] !== last_vecino_der_exp[2]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port vecino_der[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", vecino_der_expected_prev);
		$display ("     Real value = %b", vecino_der_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_vecino_der_exp[2] = vecino_der_expected_prev[2];
	end
	if (
		( vecino_der_expected_prev[3] !== 1'bx ) && ( vecino_der_prev[3] !== vecino_der_expected_prev[3] )
		&& ((vecino_der_expected_prev[3] !== last_vecino_der_exp[3]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port vecino_der[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", vecino_der_expected_prev);
		$display ("     Real value = %b", vecino_der_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_vecino_der_exp[3] = vecino_der_expected_prev[3];
	end
	if (
		( vecino_izq_expected_prev[0] !== 1'bx ) && ( vecino_izq_prev[0] !== vecino_izq_expected_prev[0] )
		&& ((vecino_izq_expected_prev[0] !== last_vecino_izq_exp[0]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port vecino_izq[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", vecino_izq_expected_prev);
		$display ("     Real value = %b", vecino_izq_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_vecino_izq_exp[0] = vecino_izq_expected_prev[0];
	end
	if (
		( vecino_izq_expected_prev[1] !== 1'bx ) && ( vecino_izq_prev[1] !== vecino_izq_expected_prev[1] )
		&& ((vecino_izq_expected_prev[1] !== last_vecino_izq_exp[1]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port vecino_izq[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", vecino_izq_expected_prev);
		$display ("     Real value = %b", vecino_izq_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_vecino_izq_exp[1] = vecino_izq_expected_prev[1];
	end
	if (
		( vecino_izq_expected_prev[2] !== 1'bx ) && ( vecino_izq_prev[2] !== vecino_izq_expected_prev[2] )
		&& ((vecino_izq_expected_prev[2] !== last_vecino_izq_exp[2]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port vecino_izq[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", vecino_izq_expected_prev);
		$display ("     Real value = %b", vecino_izq_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_vecino_izq_exp[2] = vecino_izq_expected_prev[2];
	end
	if (
		( vecino_izq_expected_prev[3] !== 1'bx ) && ( vecino_izq_prev[3] !== vecino_izq_expected_prev[3] )
		&& ((vecino_izq_expected_prev[3] !== last_vecino_izq_exp[3]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port vecino_izq[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", vecino_izq_expected_prev);
		$display ("     Real value = %b", vecino_izq_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_vecino_izq_exp[3] = vecino_izq_expected_prev[3];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module controlgeneralversion3_4_vlg_vec_tst();
// constants                                           
// general purpose registers
reg clock;
reg p0;
reg p1;
reg p2;
reg p3;
reg reset;
reg [3:0] vector_entrada;
// wires                                               
wire [3:0] vecino_abajo;
wire [3:0] vecino_arriba;
wire [3:0] vecino_der;
wire [3:0] vecino_izq;

wire sampler;                             

// assign statements (if any)                          
controlgeneralversion3_4 i1 (
// port map - connection between master ports and signals/registers   
	.clock(clock),
	.p0(p0),
	.p1(p1),
	.p2(p2),
	.p3(p3),
	.reset(reset),
	.vecino_abajo(vecino_abajo),
	.vecino_arriba(vecino_arriba),
	.vecino_der(vecino_der),
	.vecino_izq(vecino_izq),
	.vector_entrada(vector_entrada)
);

// clock
always
begin
	clock = 1'b0;
	clock = #50000 1'b1;
	#50000;
end 

// p0
initial
begin
	p0 = 1'b0;
	p0 = #430000 1'b1;
end 

// p1
initial
begin
	p1 = 1'b0;
end 

// p2
initial
begin
	p2 = 1'b0;
end 

// p3
initial
begin
	p3 = 1'b0;
end 

// reset
initial
begin
	reset = 1'b0;
end 
// vector_entrada[ 3 ]
initial
begin
	vector_entrada[3] = 1'b1;
	vector_entrada[3] = #440000 1'b0;
end 
// vector_entrada[ 2 ]
initial
begin
	vector_entrada[2] = 1'b0;
end 
// vector_entrada[ 1 ]
initial
begin
	vector_entrada[1] = 1'b0;
end 
// vector_entrada[ 0 ]
initial
begin
	vector_entrada[0] = 1'b0;
	vector_entrada[0] = #440000 1'b1;
end 

controlgeneralversion3_4_vlg_sample_tst tb_sample (
	.clock(clock),
	.p0(p0),
	.p1(p1),
	.p2(p2),
	.p3(p3),
	.reset(reset),
	.vector_entrada(vector_entrada),
	.sampler_tx(sampler)
);

controlgeneralversion3_4_vlg_check_tst tb_out(
	.vecino_abajo(vecino_abajo),
	.vecino_arriba(vecino_arriba),
	.vecino_der(vecino_der),
	.vecino_izq(vecino_izq),
	.sampler_rx(sampler)
);
endmodule

